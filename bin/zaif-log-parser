#!/usr/bin/env python
# -*- coding: utf-8 -*-
from __future__ import print_function

import getopt
import sys
import functools
from decimal import *
import simplejson as json

# 仮想通貨丸め桁数(1億円(1E+8)の仮想通貨までを想定)
ROUNDING_MIN_DIGITS = Decimal('1E-8') # = 1 / 1E+8
ZERO = Decimal('0')

verbose = False

def usage():
  eprint('仮想通貨と円の取引履歴を標準入力で受けて、収支を出力する。')
  eprint('Options:')
  eprint('  -h, --help: このヘルプを表示する。')
  eprint('  -v, --verbose: ログ出力を行う。')

def eprint(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)

# 利益計算用のDecicmal 丸め
def quantize_benefit(amount):
  return amount.quantize(ZERO, rounding=ROUND_DOWN) # 1円未満は切り捨てとする

# 通貨全般の Decicmal 丸め
def quantize_money(amount):
  res = amount.quantize(ROUNDING_MIN_DIGITS, rounding=ROUND_HALF_UP)
  return res if res != 0 else ZERO # 0e-N, -0e-N を 0 にする

input = json.load(sys.stdin, encoding='utf-8')


#  "4467575": {
#    "currency_pair": "zaif_jpy",
#    "action": "ask",
#    "amount": 1000,
#    "price": 2.83,
#    "fee_amount": 0,
#    "your_action": "bid",
#    "bonus": null,
#    "timestamp": "1513562107",
#    "comment": ""
#  },
def each(subtotal, v):
  record = v[1]
  # bid = buy, ask = sell
  is_sell = record['your_action'] == 'ask'
  sign= (Decimal('-1') if is_sell else Decimal('1'))
  key = record['currency_pair']
  prev = subtotal[key] if key in subtotal else {
    'amount': ZERO, 
    'subtotal_jpy': ZERO, 
    'unit_price': ZERO,
    'benefit': ZERO
  }
  in_amount = Decimal(record['amount'])
  fee_amount = Decimal(record['fee_amount'])
  price = Decimal(record['price'])
  # bid のときは手数料が通貨単位で、買った量から差し引かれる
  diff_amount = in_amount - (fee_amount if not is_sell else ZERO)
  # ask のときは手数料が円単位
  payed_price = fee_amount if is_sell else fee_amount * price
  # 累積通貨資産
  amount = prev['amount'] + sign * diff_amount
  # 購入に使った累計JPY資産
  # 買ったとき: 追加＝購入金額 - 手数料
  # 売ったとき: 減少＝現在のsubtotal_jpyが何割減ったか＝(販売量+手数料) * 購入単価
  subtotal_jpy = ZERO
  if is_sell:
    subtotal_jpy = prev['subtotal_jpy'] - in_amount * prev['unit_price']
  else:
    subtotal_jpy = prev['subtotal_jpy'] + diff_amount * price - payed_price
  # 現時点の単価
  unit_price = subtotal_jpy / amount if amount != 0 else ZERO
  # 現時点の利益(sellで初めて計上)
  diff_benefit=ZERO
  if is_sell:
    diff_benefit = diff_amount * (price - prev['unit_price'])
  benefit = prev['benefit'] + diff_benefit
    
  subtotal[key] = {
    'amount': amount,
    'subtotal_jpy': subtotal_jpy,
    'unit_price': unit_price,
    'benefit': benefit
  }
  eprint(record['your_action'], key, record['amount'], 'by', record['price'], 'jpy',('(benefit: ' + str(diff_benefit) + ')') if is_sell else '')
  eprint('traded:',record)
  eprint(subtotal[key])
  return subtotal

# トータル収益計算
def sum_benefit(total, v):
  # skip *_btc trades.
  if v[0].endswith("_btc"): return total
  return total + v[1]['benefit']

# 見やすいように数値を丸める
def map_prettify(v):
  key = v[0]
  record = v[1]
  if key == 'total':
    return [key, {
      'benefit': quantize_benefit(record['benefit'])
    }]
  return [key, {
    'amount': quantize_money(record['amount']),
    'subtotal_jpy': quantize_money(record['subtotal_jpy']),
    'unit_price': quantize_money(record['unit_price']),
    'benefit': quantize_benefit(record['benefit'])
  }]

## ----

opts = []
try:
  opts = getopt.getopt(sys.argv[1:], 'vh', ['verbose', 'help'])
except getopt.GetoptError as err:
  eprint(err)
  usage()
  sys.exit(2)
print(opts)
for o, a in opts:
  if o in ('-v','--verbose'):
    verbose = True
  elif o in ('-h', '--help'):
    usage()
    sys.exit()
  else:
    usage()
    sys.exit(2)

## ----

result = functools.reduce(each, sorted(input.items()), {})
result['total'] = {'benefit':functools.reduce(sum_benefit, result.items(), ZERO) }

result = dict(map(map_prettify, result.items()))

print(json.dumps(result, use_decimal=True))

